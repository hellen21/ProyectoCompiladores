
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 20 14:41:33 CST 2012
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 20 14:41:33 CST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\003\000\002\002\004\000\002\002" +
    "\005\000\002\003\023\000\002\004\003\000\002\004\003" +
    "\000\002\005\010\000\002\010\012\000\002\011\005\000" +
    "\002\012\017\000\002\015\003\000\002\015\004\000\002" +
    "\016\004\000\002\017\004\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\005\000\002\023\003\000" +
    "\002\024\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\027\005" +
    "\000\002\030\006\000\002\031\011\000\002\032\011\000" +
    "\002\033\007\000\002\034\007\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\005\000\002\037\005\000" +
    "\002\040\005\000\002\041\005\000\002\042\005\000\002" +
    "\043\006\000\002\044\005\000\002\045\010\000\002\047" +
    "\003\000\002\047\004\000\002\050\004\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\052\007\000" +
    "\002\053\006\000\002\054\004\000\002\055\005\000\002" +
    "\006\004\000\002\006\002\000\002\007\004\000\002\007" +
    "\002\000\002\014\004\000\002\014\002\000\002\046\003" +
    "\000\002\046\002\000\002\013\003\000\002\013\002\000" +
    "\002\057\011\000\002\060\007\000\002\061\006\000\002" +
    "\061\002\000\002\062\004\000\002\062\002\000\002\063" +
    "\004\000\002\064\004\000\002\064\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\004\006\001\002\000\006\002\135\004" +
    "\134\001\002\000\006\002\001\004\001\001\002\000\004" +
    "\050\007\001\002\000\004\005\010\001\002\000\004\006" +
    "\011\001\002\000\004\007\012\001\002\000\004\010\013" +
    "\001\002\000\004\011\014\001\002\000\004\012\015\001" +
    "\002\000\004\013\016\001\002\000\004\014\017\001\002" +
    "\000\004\015\020\001\002\000\004\050\021\001\002\000" +
    "\004\016\022\001\002\000\004\005\023\001\002\000\004" +
    "\033\025\001\002\000\004\017\131\001\002\000\004\012" +
    "\026\001\002\000\026\012\043\043\040\044\047\045\042" +
    "\046\052\047\036\050\045\051\041\052\055\053\044\001" +
    "\002\000\030\014\uffbf\015\uffbf\016\uffbf\021\uffbf\023\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001" +
    "\002\000\030\014\uffd6\015\uffd6\016\uffd6\021\uffd6\023\uffd6" +
    "\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001" +
    "\002\000\030\014\uffbe\015\uffbe\016\uffbe\021\uffbe\023\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\001" +
    "\002\000\030\014\uffdc\015\uffdc\016\uffdc\021\uffdc\023\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\030\014\uffdb\015\uffdb\016\uffdb\021\uffdb\023\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\001" +
    "\002\000\030\014\102\015\uffd4\016\uffd4\021\uffd4\023\uffd4" +
    "\034\105\035\106\036\107\037\101\040\104\041\103\001" +
    "\002\000\030\014\uffc0\015\uffc0\016\uffc0\021\uffc0\023\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\001" +
    "\002\000\026\012\043\043\040\044\047\045\042\046\052" +
    "\047\036\050\045\051\041\052\055\053\044\001\002\000" +
    "\030\014\uffd5\015\uffd5\016\uffd5\021\uffd5\023\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000" +
    "\030\014\uffc5\015\uffc5\016\uffc5\021\uffc5\023\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\001\002\000" +
    "\030\014\uffc6\015\uffc6\016\uffc6\021\uffc6\023\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\001\002\000" +
    "\030\014\uffc2\015\uffc2\016\uffc2\021\uffc2\023\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\001\002\000" +
    "\026\012\043\043\040\044\047\045\042\046\052\047\036" +
    "\050\045\051\041\052\055\053\044\001\002\000\030\014" +
    "\uffc8\015\uffc8\016\uffc8\021\uffc8\023\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\001\002\000\030\014" +
    "\uffc3\015\uffc3\016\uffc3\021\uffc3\023\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\001\002\000\030\014" +
    "\uffc1\015\uffc1\016\uffc1\021\uffc1\023\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002\000\030\014" +
    "\uffc4\015\uffc4\016\uffc4\021\uffc4\023\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\001\002\000\030\014" +
    "\uffd9\015\uffd9\016\uffd9\021\uffd9\023\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000\030\014" +
    "\uffd7\015\uffd7\016\uffd7\021\uffd7\023\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002\000\012\024" +
    "\066\025\065\026\070\050\067\001\002\000\030\014\uffd8" +
    "\015\uffd8\016\uffd8\021\uffd8\023\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\030\014\uffda" +
    "\015\uffda\016\uffda\021\uffda\023\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\001\002\000\030\014\uffc7" +
    "\015\uffc7\016\uffc7\021\uffc7\023\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\001\002\000\004\016\057" +
    "\001\002\000\004\021\060\001\002\000\032\005\uffdd\017" +
    "\uffdd\022\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\050\uffdd" +
    "\055\uffdd\056\uffdd\060\uffdd\061\uffdd\001\002\000\006\014" +
    "\uffef\050\uffef\001\002\000\006\014\ufff0\050\ufff0\001\002" +
    "\000\004\014\073\001\002\000\006\014\uffee\050\uffee\001" +
    "\002\000\006\014\uffeb\050\uffeb\001\002\000\006\014\uffec" +
    "\050\uffec\001\002\000\004\012\071\001\002\000\006\014" +
    "\uffea\050\uffea\001\002\000\004\016\072\001\002\000\030" +
    "\014\uffb7\015\uffb7\016\uffb7\021\uffb7\023\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\001\002\000\026" +
    "\012\043\043\040\044\047\045\042\046\052\047\036\050" +
    "\045\051\041\052\055\053\044\001\002\000\004\015\075" +
    "\001\002\000\030\014\uffb8\015\uffb8\016\uffb8\021\uffb8\023" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\001\002\000\004\016\077\001\002\000\030\014\uffb5\015" +
    "\uffb5\016\uffb5\021\uffb5\023\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\001\002\000\030\014\uffb6\015" +
    "\uffb6\016\uffb6\021\uffb6\023\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\001\002\000\026\012\043\043" +
    "\040\044\047\045\042\046\052\047\036\050\045\051\041" +
    "\052\055\053\044\001\002\000\026\012\043\043\040\044" +
    "\047\045\042\046\052\047\036\050\045\051\041\052\055" +
    "\053\044\001\002\000\006\042\114\050\115\001\002\000" +
    "\026\012\043\043\040\044\047\045\042\046\052\047\036" +
    "\050\045\051\041\052\055\053\044\001\002\000\026\012" +
    "\043\043\040\044\047\045\042\046\052\047\036\050\045" +
    "\051\041\052\055\053\044\001\002\000\026\012\043\043" +
    "\040\044\047\045\042\046\052\047\036\050\045\051\041" +
    "\052\055\053\044\001\002\000\026\012\043\043\040\044" +
    "\047\045\042\046\052\047\036\050\045\051\041\052\055" +
    "\053\044\001\002\000\030\014\uffd1\015\uffd1\016\uffd1\021" +
    "\uffd1\023\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\001\002\000\030\014\uffd2\015\uffd2\016\uffd2\021" +
    "\uffd2\023\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\001\002\000\030\014\uffd3\015\uffd3\016\uffd3\021" +
    "\uffd3\023\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\001\002\000\030\014\uffcf\015\uffcf\016\uffcf\021" +
    "\uffcf\023\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\001\002\000\030\014\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\023\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\041\uffcd\001\002\000\004\012\116\001\002\000\030\012" +
    "\043\016\uffad\043\040\044\047\045\042\046\052\047\036" +
    "\050\045\051\041\052\055\053\044\001\002\000\004\016" +
    "\125\001\002\000\006\016\uffae\023\122\001\002\000\006" +
    "\016\uffcb\023\uffcb\001\002\000\026\012\043\043\040\044" +
    "\047\045\042\046\052\047\036\050\045\051\041\052\055" +
    "\053\044\001\002\000\006\016\uffca\023\uffca\001\002\000" +
    "\006\016\uffc9\023\uffc9\001\002\000\030\014\uffcc\015\uffcc" +
    "\016\uffcc\021\uffcc\023\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\001\002\000\004\015\127\001\002" +
    "\000\030\014\uffce\015\uffce\016\uffce\021\uffce\023\uffce\034" +
    "\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001\002" +
    "\000\030\014\uffd0\015\uffd0\016\uffd0\021\uffd0\023\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\001\002" +
    "\000\004\017\132\001\002\000\006\002\ufffe\004\ufffe\001" +
    "\002\000\004\054\ufffd\001\002\000\004\050\141\001\002" +
    "\000\004\002\000\001\002\000\004\054\ufffc\001\002\000" +
    "\004\054\140\001\002\000\006\002\uffff\004\uffff\001\002" +
    "\000\006\005\143\020\142\001\002\000\004\050\300\001" +
    "\002\000\016\006\uffb3\017\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\050\uffb3\001\002\000\016\006\uffb1\017\uffb1\024\066\025" +
    "\065\026\070\050\151\001\002\000\004\050\276\001\002" +
    "\000\006\014\274\050\ufff3\001\002\000\006\006\155\017" +
    "\153\001\002\000\032\005\uffb4\006\uffb4\017\uffb4\022\uffb4" +
    "\024\uffb4\025\uffb4\026\uffb4\030\uffb4\032\uffb4\033\uffb4\050" +
    "\uffb4\060\uffb4\001\002\000\004\050\ufff1\001\002\000\004" +
    "\050\ufff2\001\002\000\004\054\ufffb\001\002\000\006\006" +
    "\uffb2\017\uffb2\001\002\000\012\024\066\025\065\026\070" +
    "\050\151\001\002\000\004\050\157\001\002\000\004\012" +
    "\160\001\002\000\014\016\uffab\024\066\025\065\026\070" +
    "\050\151\001\002\000\004\050\273\001\002\000\006\016" +
    "\uffac\023\271\001\002\000\004\016\165\001\002\000\006" +
    "\016\ufff7\023\ufff7\001\002\000\004\005\166\001\002\000" +
    "\026\005\uffb3\022\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\032\uffb3\033\uffb3\050\uffb3\060\uffb3\001\002\000\026\005" +
    "\uffaf\022\uffaf\024\066\025\065\026\070\030\uffaf\032\uffaf" +
    "\033\uffaf\050\151\060\uffaf\001\002\000\020\005\206\022" +
    "\205\030\177\032\171\033\025\050\176\060\203\001\002" +
    "\000\004\012\264\001\002\000\032\005\uffe9\017\uffe9\022" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\050\uffe9\055\uffe9" +
    "\056\uffe9\060\uffe9\061\uffe9\001\002\000\032\005\uffe7\017" +
    "\uffe7\022\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\050\uffe7" +
    "\055\uffe7\056\uffe7\060\uffe7\061\uffe7\001\002\000\032\005" +
    "\uffe4\017\uffe4\022\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\050\uffe4\055\uffe4\056\uffe4\060\uffe4\061\uffe4\001\002\000" +
    "\032\005\uffe6\017\uffe6\022\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\033\uffe6\050\uffe6\055\uffe6\056\uffe6\060\uffe6\061\uffe6\001" +
    "\002\000\006\014\253\027\254\001\002\000\004\012\245" +
    "\001\002\000\032\005\uffe5\017\uffe5\022\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\050\uffe5\055\uffe5\056\uffe5\060\uffe5" +
    "\061\uffe5\001\002\000\030\005\uffb0\017\uffb0\022\uffb0\030" +
    "\uffb0\032\uffb0\033\uffb0\050\uffb0\055\uffb0\056\uffb0\060\uffb0" +
    "\061\uffb0\001\002\000\032\005\uffe8\017\uffe8\022\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\050\uffe8\055\uffe8\056\uffe8" +
    "\060\uffe8\061\uffe8\001\002\000\004\012\214\001\002\000" +
    "\032\005\uffe3\017\uffe3\022\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\050\uffe3\055\uffe3\056\uffe3\060\uffe3\061\uffe3\001" +
    "\002\000\026\012\043\043\040\044\047\045\042\046\052" +
    "\047\036\050\045\051\041\052\055\053\044\001\002\000" +
    "\020\005\uffaf\017\uffaf\030\uffaf\032\uffaf\033\uffaf\050\uffaf" +
    "\060\uffaf\001\002\000\020\005\206\017\210\030\177\032" +
    "\171\033\025\050\176\060\203\001\002\000\032\005\uffe2" +
    "\017\uffe2\022\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\050" +
    "\uffe2\055\uffe2\056\uffe2\060\uffe2\061\uffe2\001\002\000\004" +
    "\021\212\001\002\000\004\017\213\001\002\000\006\006" +
    "\ufff8\017\ufff8\001\002\000\026\012\043\043\040\044\047" +
    "\045\042\046\052\047\036\050\045\051\041\052\055\053" +
    "\044\001\002\000\004\016\216\001\002\000\004\005\217" +
    "\001\002\000\010\017\uffa5\056\uffa5\061\uffa5\001\002\000" +
    "\010\017\uffa7\056\226\061\223\001\002\000\004\017\222" +
    "\001\002\000\032\005\uffaa\017\uffaa\022\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\050\uffaa\055\uffaa\056\uffaa\060\uffaa" +
    "\061\uffaa\001\002\000\004\057\242\001\002\000\004\017" +
    "\uffa4\001\002\000\010\017\uffa6\056\uffa6\061\uffa6\001\002" +
    "\000\014\043\227\044\230\051\231\052\233\053\234\001" +
    "\002\000\004\057\uffba\001\002\000\004\057\uffb9\001\002" +
    "\000\004\057\uffbb\001\002\000\004\057\235\001\002\000" +
    "\004\057\uffbc\001\002\000\004\057\uffbd\001\002\000\026" +
    "\005\uffaf\017\uffaf\030\uffaf\032\uffaf\033\uffaf\050\uffaf\055" +
    "\uffaf\056\uffaf\060\uffaf\061\uffaf\001\002\000\026\005\206" +
    "\017\uffa2\030\177\032\171\033\025\050\176\055\240\056" +
    "\uffa2\060\203\061\uffa2\001\002\000\010\017\uffa9\056\uffa9" +
    "\061\uffa9\001\002\000\004\021\241\001\002\000\010\017" +
    "\uffa3\056\uffa3\061\uffa3\001\002\000\022\005\uffaf\017\uffaf" +
    "\030\uffaf\032\uffaf\033\uffaf\050\uffaf\055\uffaf\060\uffaf\001" +
    "\002\000\022\005\206\017\uffa2\030\177\032\171\033\025" +
    "\050\176\055\240\060\203\001\002\000\004\017\uffa8\001" +
    "\002\000\026\012\043\043\040\044\047\045\042\046\052" +
    "\047\036\050\045\051\041\052\055\053\044\001\002\000" +
    "\004\016\247\001\002\000\016\005\206\030\177\032\171" +
    "\033\025\050\176\060\203\001\002\000\004\031\251\001" +
    "\002\000\016\005\206\030\177\032\171\033\025\050\176" +
    "\060\203\001\002\000\032\005\uffdf\017\uffdf\022\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\050\uffdf\055\uffdf\056\uffdf" +
    "\060\uffdf\061\uffdf\001\002\000\026\012\043\043\040\044" +
    "\047\045\042\046\052\047\036\050\045\051\041\052\055" +
    "\053\044\001\002\000\026\012\043\043\040\044\047\045" +
    "\042\046\052\047\036\050\045\051\041\052\055\053\044" +
    "\001\002\000\004\021\256\001\002\000\032\005\uffe1\017" +
    "\uffe1\022\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\050\uffe1" +
    "\055\uffe1\056\uffe1\060\uffe1\061\uffe1\001\002\000\004\015" +
    "\260\001\002\000\004\027\261\001\002\000\026\012\043" +
    "\043\040\044\047\045\042\046\052\047\036\050\045\051" +
    "\041\052\055\053\044\001\002\000\004\021\263\001\002" +
    "\000\032\005\uffe0\017\uffe0\022\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\050\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0" +
    "\001\002\000\026\012\043\043\040\044\047\045\042\046" +
    "\052\047\036\050\045\051\041\052\055\053\044\001\002" +
    "\000\004\016\266\001\002\000\016\005\206\030\177\032" +
    "\171\033\025\050\176\060\203\001\002\000\032\005\uffde" +
    "\017\uffde\022\uffde\030\uffde\031\uffde\032\uffde\033\uffde\050" +
    "\uffde\055\uffde\056\uffde\060\uffde\061\uffde\001\002\000\006" +
    "\016\ufff6\023\ufff6\001\002\000\012\024\066\025\065\026" +
    "\070\050\151\001\002\000\006\016\ufff4\023\ufff4\001\002" +
    "\000\006\016\ufff5\023\ufff5\001\002\000\004\015\275\001" +
    "\002\000\004\050\uffed\001\002\000\004\021\277\001\002" +
    "\000\032\005\ufff9\006\ufff9\017\ufff9\022\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\030\ufff9\032\ufff9\033\ufff9\050\ufff9\060\ufff9" +
    "\001\002\000\004\005\301\001\002\000\016\006\uffb3\017" +
    "\uffb3\024\uffb3\025\uffb3\026\uffb3\050\uffb3\001\002\000\016" +
    "\006\uffb1\017\uffb1\024\066\025\065\026\070\050\151\001" +
    "\002\000\006\006\155\017\304\001\002\000\004\054\ufffa" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\006\002\003\003\004\001\001\000\010\004" +
    "\136\005\132\010\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\035\055\036\031\037\032\040\053\041\047\042\052" +
    "\043\050\044\027\045\036\051\033\052\045\053\034\054" +
    "\026\055\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\035\077\036\031" +
    "\037\032\040\053\041\047\042\052\043\050\044\027\045" +
    "\036\051\033\052\045\053\034\054\026\055\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\035\075\036\031\037\032\040\053" +
    "\041\047\042\052\043\050\044\027\045\036\051\033\052" +
    "\045\053\034\054\026\055\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\062\023\061" +
    "\024\060\025\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\035\073\036\031\037\032" +
    "\040\053\041\047\042\052\043\050\044\027\045\036\051" +
    "\033\052\045\053\034\054\026\055\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\051\127\052\045\053\034" +
    "\054\026\055\030\001\001\000\014\051\125\052\045\053" +
    "\034\054\026\055\030\001\001\000\002\001\001\000\014" +
    "\051\112\052\045\053\034\054\026\055\030\001\001\000" +
    "\014\051\111\052\045\053\034\054\026\055\030\001\001" +
    "\000\014\051\110\052\045\053\034\054\026\055\030\001" +
    "\001\000\014\051\107\052\045\053\034\054\026\055\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\035\120\036\031\037\032\040\053\041\047\042" +
    "\052\043\050\044\027\045\036\046\116\047\117\051\033" +
    "\052\045\053\034\054\026\055\030\001\001\000\002\001" +
    "\001\000\004\050\122\001\001\000\002\001\001\000\036" +
    "\035\123\036\031\037\032\040\053\041\047\042\052\043" +
    "\050\044\027\045\036\051\033\052\045\053\034\054\026" +
    "\055\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\143\001\001\000\022\007\146" +
    "\011\147\020\144\021\145\022\151\023\061\024\060\025" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\020\155\021\145\022\151\023\061\024\060\025\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\013\162" +
    "\015\161\016\163\020\160\021\145\022\151\023\061\024" +
    "\060\025\063\001\001\000\002\001\001\000\004\017\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\166\001\001\000\022\011\147\014\167" +
    "\020\144\021\145\022\151\023\061\024\060\025\063\001" +
    "\001\000\022\026\200\027\171\030\201\031\172\032\174" +
    "\033\177\034\203\057\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\035\210\036\031\037\032\040" +
    "\053\041\047\042\052\043\050\044\027\045\036\051\033" +
    "\052\045\053\034\054\026\055\030\001\001\000\004\014" +
    "\206\001\001\000\022\026\200\027\171\030\201\031\172" +
    "\032\174\033\177\034\203\057\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\035\214\036\031\037\032\040\053\041\047\042" +
    "\052\043\050\044\027\045\036\051\033\052\045\053\034" +
    "\054\026\055\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\062\217\063\220\001\001\000\006\060\224" +
    "\061\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\231\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\235\001\001\000\024\026\200\027" +
    "\171\030\201\031\172\032\174\033\177\034\203\057\173" +
    "\064\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\242\001\001\000\024\026\200" +
    "\027\171\030\201\031\172\032\174\033\177\034\203\057" +
    "\173\064\243\001\001\000\002\001\001\000\036\035\245" +
    "\036\031\037\032\040\053\041\047\042\052\043\050\044" +
    "\027\045\036\051\033\052\045\053\034\054\026\055\030" +
    "\001\001\000\002\001\001\000\022\026\247\027\171\030" +
    "\201\031\172\032\174\033\177\034\203\057\173\001\001" +
    "\000\002\001\001\000\022\026\251\027\171\030\201\031" +
    "\172\032\174\033\177\034\203\057\173\001\001\000\002" +
    "\001\001\000\036\035\256\036\031\037\032\040\053\041" +
    "\047\042\052\043\050\044\027\045\036\051\033\052\045" +
    "\053\034\054\026\055\030\001\001\000\036\035\254\036" +
    "\031\037\032\040\053\041\047\042\052\043\050\044\027" +
    "\045\036\051\033\052\045\053\034\054\026\055\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\035\261\036\031\037\032\040" +
    "\053\041\047\042\052\043\050\044\027\045\036\051\033" +
    "\052\045\053\034\054\026\055\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\035\264\036\031\037\032" +
    "\040\053\041\047\042\052\043\050\044\027\045\036\051" +
    "\033\052\045\053\034\054\026\055\030\001\001\000\002" +
    "\001\001\000\022\026\266\027\171\030\201\031\172\032" +
    "\174\033\177\034\203\057\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\015\271\016\163\020\160\021" +
    "\145\022\151\023\061\024\060\025\063\001\001\000\004" +
    "\017\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\301\001\001\000\022\007\302\011" +
    "\147\020\144\021\145\022\151\023\061\024\060\025\063" +
    "\001\001\000\004\012\153\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
	Scanner scanner;
	
	public parser(java.io.Reader input){
	scanner = new Scanner(input);
	}

public String errores(int sys)
{
	if (sys == 2)
		return("INT");
	else if (sys == 3)
		return("STRING");
	else if (sys == 4)
		return("ASIGN");
	else if (sys == 5)
		return("MULT");
	else if (sys == 6)
		return("SUMA");
	else if (sys == 7)
		return("PARENi");
	else if (sys == 8)
		return("PARENd");
	else if (sys == 9)
		return("PUNTOyCOMA");
	else if (sys == 10)
		return("COMA");
	else if (sys == 11)
		return("NUM");
	else if (sys == 12)
		return("STRING");
	else if (sys == 13)
		return("ID");
	else 
		return("error");
}

public void syntax_error(Symbol cur_token)
{
	if (cur_token.sym == 2)
		report_error("No se esperaba un Entero", cur_token);
	else if (cur_token.sym == 3)
		report_error("No se esperaba un String", cur_token);
	else if (cur_token.sym == 4)
		report_error("No se esperaba una asignacion", cur_token);
	else if (cur_token.sym == 5)
		report_error("No se esperaba una multiplicacion", cur_token);
	else if (cur_token.sym == 6)
		report_error("No se esperaba una suma", cur_token);
	else if (cur_token.sym == 7)
		report_error("No se esperaba parentesis abierto", cur_token);
	else if (cur_token.sym == 8)
		report_error("No se esperaba parentesis cerrado", cur_token);
	else if (cur_token.sym == 9)
		report_error("No se esperaba un punto y coma", cur_token);
	else if (cur_token.sym == 10)
		report_error("No se esperaba una coma", cur_token);
	else if (cur_token.sym == 11)
		report_error("No se esperaba un numero", cur_token);
	else if (cur_token.sym == 12)
		report_error("No se esperaba una String", cur_token);
	else if (cur_token.sym == 13)
		report_error("No se esparaba un ID", cur_token);
	else 
		report_error("error", cur_token);
	
}

 public void report_error(String message, Object info) {
   StringBuffer m = new StringBuffer("Error ");

   if (info instanceof java_cup.runtime.Symbol) {
     m.append( "(" + errores(((java_cup.runtime.Symbol)info).sym) +")" );
     m.append(" en fila "+ ((java_cup.runtime.Symbol)info).left + " columna " + ((java_cup.runtime.Symbol)info).right );
     
     if (((java_cup.runtime.Symbol)info).value != null)
       m.append(". Lexema: " + ((java_cup.runtime.Symbol)info).value.toString());
     
   }
   m.append(" : "+message);
   
   System.out.println(m);
 }
   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new RuntimeException("Error Fatal de Sintáxis");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // BreakStatement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStatement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BreakStatement ::= BREAK PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BreakStatement",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SwitchBlock ::= CaseBlockList DefaultBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchBlock",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CaseBlockList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBlockList",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CaseBlockList ::= CaseBlockList CaseBlock 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBlockList",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DefaultBlock ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefaultBlock",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DefaultBlock ::= DEFAULT DOSPUNTOS StatementList BreakStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefaultBlock",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CaseBlock ::= CASE ConstantExpression DOSPUNTOS StatementList BreakStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CaseBlock",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SwitchStatement ::= SWITCH PARENi Expression PARENd LLAVEi SwitchBlock LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SwitchStatement",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FormalParameterBlock ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterBlock",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FormalParameterBlock ::= FormalParameterList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterBlock",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpressionListBlock ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionListBlock",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpressionListBlock ::= ExpressionList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionListBlock",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MethodDecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // MethodDecl ::= MethodDecl MethodDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VarDecl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VarDecl ::= VarDecl VarDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BracketExpression ::= PARENi Expression PARENd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BracketExpression",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NotExpression ::= NOT Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NotExpression",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // AllocationExpression ::= NEW myIDENTIFIER PARENi PARENd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AllocationExpression",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ArrayAllocationExpression ::= NEW SimpleType CORCHETEi Expression CORCHETEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayAllocationExpression",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ConstantExpression ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ConstantExpression ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ConstantExpression ::= mySTRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ConstantExpression ::= myCHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ConstantExpression ::= myINTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConstantExpression",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PrimaryExpression ::= BracketExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrimaryExpression ::= NotExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrimaryExpression ::= AllocationExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrimaryExpression ::= ArrayAllocationExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrimaryExpression ::= THIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PrimaryExpression ::= myIDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PrimaryExpression ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PrimaryExpression ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PrimaryExpression ::= mySTRING_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PrimaryExpression ::= myCHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PrimaryExpression ::= myINTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpressionRest ::= COMA Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionRest",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpressionList ::= ExpressionList ExpressionRest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpressionList ::= Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpressionList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MessageSend ::= PrimaryExpression PUNTO myIDENTIFIER PARENi ExpressionListBlock PARENd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MessageSend",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ArrayLength ::= PrimaryExpression PUNTO LENGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayLength",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArrayLookup ::= PrimaryExpression CORCHETEi PrimaryExpression CORCHETEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayLookup",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TimesExpression ::= PrimaryExpression MULT PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TimesExpression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MinusExpression ::= PrimaryExpression RESTA PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MinusExpression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PlusExpression ::= PrimaryExpression SUMA PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PlusExpression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CompareExpression ::= PrimaryExpression MENOR_QUE PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompareExpression",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AndExpression ::= PrimaryExpression AND PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AndExpression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= PrimaryExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= MessageSend 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= ArrayLength 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= ArrayLookup 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= TimesExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= MinusExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= PlusExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= CompareExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= AndExpression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrintStatement ::= SYSTEM_OUT_PRINTLn PARENi Expression PARENd PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrintStatement",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // WhileStatement ::= WHILE PARENi Expression PARENd Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStatement",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IfStatement ::= IF PARENi Expression PARENd Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStatement",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ArrayAssignmentStatement ::= myIDENTIFIER CORCHETEi Expression CORCHETEd ASIGN Expression PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayAssignmentStatement",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AssignmentStatement ::= myIDENTIFIER ASIGN Expression PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignmentStatement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Block ::= LLAVEi StatementList LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= PrintStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= SwitchStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= WhileStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= IfStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= ArrayAssignmentStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= AssignmentStatement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IntegerType ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IntegerType",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BooleanType ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BooleanType",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CharType ::= CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CharType",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ArrayType ::= SimpleType CORCHETEi CORCHETEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrayType",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SimpleType ::= IntegerType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SimpleType ::= BooleanType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SimpleType ::= CharType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SimpleType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= myIDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= ArrayType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= SimpleType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FormalParameterRest ::= COMA FormalParameterList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterRest",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FormalParameter ::= Type myIDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FormalParameterList ::= FormalParameterList FormalParameterRest 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FormalParameterList ::= FormalParameter 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclaration ::= PUBLIC Type myIDENTIFIER PARENi FormalParameterBlock PARENd LLAVEi VarDecl StatementList RETURN Expression PUNTOyCOMA LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclaration ::= Type myIDENTIFIER PUNTOyCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassExtendsDeclaration ::= CLASS myIDENTIFIER EXTENDS myIDENTIFIER LLAVEi VarDecl MethodDecl LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassExtendsDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassDeclaration ::= CLASS myIDENTIFIER LLAVEi VarDecl MethodDecl LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TypeDeclaration ::= ClassExtendsDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypeDeclaration ::= ClassDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MainClas ::= CLASS myIDENTIFIER LLAVEi PUBLIC STATIC VOID MAIN PARENi STRING CORCHETEi CORCHETEd myIDENTIFIER PARENd LLAVEi PrintStatement LLAVEd LLAVEd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClas",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Goal ::= Goal TypeDeclaration myEOF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Goal ::= MainClas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

